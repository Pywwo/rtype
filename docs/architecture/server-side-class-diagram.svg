<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="11624px" height="2295px" viewBox="-0.5 -0.5 11624 2295" content="3cU2FsdFGVkX108qNosUmKI6muzaDqwmZnXhd9jBwfK13F9G+YOvo=1euMU390" style="background-color: rgb(255, 255, 255);"><defs><style type="text/css">ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;ul { margin-top: 0px; margin-bottom: 10px } &#xa;ol { margin-top: 0px; margin-bottom: 10px } &#xa;</style></defs><g><path d="M 0 210 L 2113 210 L 2113 1471 L 0 1471 L 0 190 L 422.6 190 L 422.6 210" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2103 215 L 2098 225 L 2108 225 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1051" y="222.5">ecs</text></g><path d="M 39 269 L 494 269 L 494 730 L 39 730 L 39 249 L 130 249 L 130 269" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 484 274 L 479 284 L 489 284 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="261" y="281.5">systems</text></g><rect x="57" y="299" width="283" height="154" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 57 327.03 L 340 327.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="193" y="310.5">&lt;&lt;Interface&gt;&gt;</text><text x="193" y="324.5">ISystem</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="343.53">+ virtual ~ISystem() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="359.53">+ virtual void onInit() = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="375.53">+ virtual void onUpdate(float elapsedTime) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="391.53">+ virtual void onClose() = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="407.53">+ virtual const std::string &amp;getName() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="423.53">+ virtual SystemState getState() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="63.5" y="439.53">+ virtual void setState(SystemState newState) = 0</text></g><rect x="363.5" y="384" width="120" height="72" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 363.5 412.03 L 483.5 412.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="418" y="395.5">&lt;&lt;enumeration&gt;&gt;</text><text x="418" y="409.5">SystemState</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="370" y="426.53">STARTED</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="370" y="442.53">STOPPED</text></g><rect x="58" y="508" width="282" height="195" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 58 522.03 L 340 522.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 58 559.03 L 340 559.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="193.5" y="519.5">System</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="536.53"># std::string name</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="552.53"># SystemState _state</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="570.53">+ System(const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="586.53">+ ~System() override = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="602.53">+ void onInit() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="618.53">+ void onUpdate() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="634.53">+ void onClose() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="650.53">+ const std::string &amp;getName() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="666.53">+ SystemState getState() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="64.5" y="682.53">+ void setState(SystemState newState) override</text></g><path d="M 200 466.12 L 200 474.56 Q 200 483 200 493 L 200 513" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 200 454.12 L 206 466.12 L 194 466.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 353.71 603 L 410 603 Q 420 603 420 593 L 420 453" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.71 603 L 347.21 596.5 L 353.71 603 L 347.21 609.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 927 269 L 1618 269 L 1618 1012 L 927 1012 L 927 249 L 1065.2 249 L 1065.2 269" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1608 274 L 1603 284 L 1613 284 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1267" y="281.5">entities</text></g><rect x="945" y="295" width="646" height="264" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 945 323.13 L 1591 323.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1262.5" y="306.5">&lt;&lt;Interface&gt;&gt;</text><text x="1262.5" y="320.5">IEntity</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="339.63">+ virtual ~IEntity() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="355.63">+ virtual void assignComponent(const std::string &amp;componentName, components::IComponent *newComponent) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="371.63">+ virtual void removeComponent(const std::string &amp;componentName) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="387.62">+ virtual components::IComponent *getComponent(const std::string &amp;componentName) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="403.62">+ virtual std::vector&lt;components::IComponent *&gt; getComponents(std::vector&lt;std::string&gt; componentsName) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="419.63">+ virtual bool hasComponent(const std::string &amp;componentName) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="435.63">+ virtual bool hasComponents(std::vector&lt;std::string&gt; components) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="451.63">+ virtual const unsigned int &amp;getId() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="467.62">+ virtual const std::string &amp;getName() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="483.62">+ virtual const std::unordered_map&lt;std::string, components::IComponent *&gt; &amp;getAllComponents() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="499.63">+ virtual bool isEnabled() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="515.63">+ virtual void enable() = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="531.63">+ virtual void disable() = 0</text></g><rect x="945" y="647" width="647" height="333" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 945 661.09 L 1592 661.09" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 945 730.09 L 1592 730.09" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1263" y="658.5">Entity</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="675.59"># unsigned int _id</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="691.59"># std::string _name</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="707.59"># std::unordered_map&lt;std::string, components::IComponent *&gt; _components</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="723.59"># bool _enable</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="741.59">+ Entity(unsigned int id, const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="757.59">+ ~Entity() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="773.59">+ void assignComponent(const std::string &amp;componentName, components::IComponent *newComponent) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="789.59">+ void removeComponent(const std::string &amp;componentName) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="805.59">+ components::IComponent *getComponent(const std::string &amp;componentName) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="821.59">+ std::vector&lt;components::IComponent *&gt; getComponents(std::vector&lt;std::string&gt; componentsName) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="837.59">+ bool hasComponent(const std::string &amp;componentName) const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="853.59">+ bool hasComponents(std::vector&lt;std::string&gt; components) const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="869.59">+ const unsigned int  &amp;getId() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="885.59">+ const std::string &amp;getName() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="901.59">+ const std::unordered_map&lt;std::string, components::IComponent *&gt; &amp;getAllComponents() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="917.59">+ bool isEnabled() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="933.59">+ void enable() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="951.5" y="949.59">+ void disable() override</text></g><path d="M 1270 572.12 L 1270 593 Q 1270 603 1270 613 L 1270 647" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1270 560.12 L 1276 572.12 L 1264 572.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1727.5 269 L 2021.5 269 L 2021.5 558 L 1727.5 558 L 1727.5 249 L 1786.3 249 L 1786.3 269" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2011.5 274 L 2006.5 284 L 2016.5 284 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="1869" y="281.5">components</text></g><rect x="1746" y="296" width="252" height="85" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 1746 324.06 L 1998 324.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1866.5" y="307.5">&lt;&lt;Interface&gt;&gt;</text><text x="1866.5" y="321.5">IComponent</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1752.5" y="340.56">+ virtual ~IComponent() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1752.5" y="356.56">+ virtual entities::IEntity &amp;getEntity() = 0</text></g><rect x="1750.5" y="416" width="243" height="106" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 1750.5 430 L 1993.5 430" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1750.5 451 L 1993.5 451" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1866.5" y="427.5">Component</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1757" y="444.5">- entities::IEntity &amp;_entity</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1757" y="462.5">+ Component(entities::IEntity &amp;entity)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1757" y="478.5">+ ~Component() override = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="1757" y="494.5">+ entities::IEntity &amp;getEntity() override</text></g><path d="M 1870 394.12 L 1870 398.56 Q 1870 403 1870 409.5 L 1870 416" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1870 382.12 L 1876 394.12 L 1864 394.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 39 810.5 L 825 810.5 L 825 1405.5 L 39 1405.5 L 39 790.5 L 196.2 790.5 L 196.2 810.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 815 815.5 L 810 825.5 L 820 825.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="426.5" y="823">managers</text></g><rect x="55" y="861.5" width="453" height="265" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 55 875.63 L 508 875.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 55 944.63 L 508 944.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="276" y="873">SystemManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="890.12">- std::unordered_map&lt;std::string, systems::System *&gt; _systems</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="906.13">- float _timeScale</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="922.13">- std::chrono::steady_clock::time_point _last</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="938.13">- float _elapsedTime</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="956.13">+ SystemManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="972.13">+ ~SystemManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="988.13">+ systems::System *getSystem(const std::string &amp;systemName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1004.13">+ void newSystem(const std::string &amp;systemName, systems::System *newSystem)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1020.12">+ void startSystem(const std::string &amp;systemName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1036.13">+ void stopSystem(const std::string &amp;systemName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1052.13">+ void runningTime()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1068.13">+ float getTimeScale() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1084.13">+ void setTimeScale(float newTimeScale)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1100.12">+ float getElapsedTime() const</text></g><rect x="55" y="1163.5" width="739" height="221" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 55 1177.5 L 794 1177.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 55 1214.5 L 794 1214.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="419" y="1175">EntityManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1192">- int _maxId</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1208">- std::map&lt;int, entities::Entity *&gt; _entities</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1226">+ EntityManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1242">+ ~EntityManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1258">+ void createEntity(const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1274">+ void deleteEntity(const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1290">+ void applyToEach(std::vector&lt;std::string&gt; components, typename std::common_type&lt;std::function&lt;void(entities::Entity *)&gt;&gt;::type func)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1306">+ entities::Entity *getEntityById(int id)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1322">+ entities::Entity *getEntityByName(const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1338">+ std::vector&lt;entities::Entity *&gt; getEntitiesByName(const std::string, &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1354">+ std::vector&lt;entities::Entity *&gt; getEntitiesWithComponents(std::vector&lt;std::string&gt; components)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="61.5" y="1370">+ void deleteAllEntities()</text></g><path d="M 280 847.79 L 280 773 Q 280 763 270 763 L 210 763 Q 200 763 200 753 L 200 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 860.79 L 273.5 854.29 L 280 847.79 L 286.5 854.29 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1870 522 L 1870 573 Q 1870 583 1860 583 L 1520 583 Q 1510 583 1500 583 L 1330 583 Q 1320 583 1320 573 L 1320 561.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1326 572.12 L 1320 560.12 L 1314 572.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 807.71 1273 L 1260 1273 Q 1270 1273 1270 1263 L 1270 983" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 794.71 1273 L 801.21 1266.5 L 807.71 1273 L 801.21 1279.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1603.71 813 L 1660 813 Q 1670 813 1670 803 L 1670 353 Q 1670 343 1680 343 L 1750 343" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590.71 813 L 1597.21 806.5 L 1603.71 813 L 1597.21 819.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2178 210 L 11620 210 L 11620 2291 L 2178 2291 L 2178 190 L 4066.4 190 L 4066.4 210" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="6893.5" y="222.5">rtype</text></g><path d="M 2209 295 L 11458 295 L 11458 1669 L 2209 1669 L 2209 275 L 4058.8 275 L 4058.8 295" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="6828" y="307.5">network</text></g><rect x="6748.5" y="1015.43" width="352" height="265.45" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6748.5 1029.53 L 7100.5 1029.53" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6748.5 1082.53 L 7100.5 1082.53" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6919" y="1026.93">Datagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1044.03">- HostInfos _hostInfos</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1060.03">- size_t _size</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1076.03">- void *_data</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1094.03">+ Datagram()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1110.03">+ Datagram(const HostInfos &amp;hostInfos)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1126.03">+ Datagram(size_t size, void *data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1142.03">+ Datagram(const HostInfos &amp;hostInfos, size_t size, void *data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1158.03">+ Datagram(const Datagram &amp;datagram)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1174.03">+ ~Datagram()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1190.03">+ void setHostInfos(const HostInfos &amp;hostInfos)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1206.03">+ const HostInfos &amp;getHostInfos() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1222.03">+ void setData(size_t size, void *data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1238.03">+ size_t getSize() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1254.03">+ const void *getData() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6755" y="1270.03">+ void clear()</text></g><rect x="6815.17" y="1330.93" width="219" height="73.45" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6815.17 1345 L 7034.17 1345" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6919.17" y="1342.43">RtypeDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6821.67" y="1361.5">+ RtypeDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6821.67" y="1377.5">+ ~RtypeDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6821.67" y="1393.5">+ RtypeOpCode getOpCode() const</text></g><rect x="2247" y="1513.5" width="517" height="88.36" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 2247 1527.5 L 2764 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2500" y="1525">AvailableLobbiesDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2253.5" y="1544">+ AvailableLobbiesDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2253.5" y="1560">+ ~AvailableLobbiesDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2253.5" y="1576">+ void createAvailableLobbiesDatagram(uint32_t nbLobby, const std::vector&lt;Lobby&gt; &amp;lobbies)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2253.5" y="1592">+ void extractAvailableLobbiesDatagram(uint32_t &amp;nbLobby, std::vecor&lt;Lobby&gt; &amp;lobbies)</text></g><rect x="2803.5" y="1516.5" width="394" height="88.35" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 2803.5 1530.63 L 3197.5 1530.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2995" y="1528">BinaryDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2810" y="1547.13">+ BinaryDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2810" y="1563.13">+ ~BinaryDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2810" y="1579.13">+ void createBinaryDatagram(bool value, const std::string &amp;description)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="2810" y="1595.12">+ void extractBinaryDatagram(bool &amp;value, std::string &amp;description)</text></g><rect x="3242" y="1516.5" width="412" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 3242 1530.63 L 3654 1530.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="3442.5" y="1528">ConnectLobbyDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3248.5" y="1547.13">+ ConnectLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3248.5" y="1563.13">+ ~ConnectLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3248.5" y="1579.13">+ void createConnectLobbyDatagram(uint64_t userId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3248.5" y="1595.12">+ void extractConnectLobbyDatagram(uint64_t &amp;userId, uint64_t &amp;lobbyId)</text></g><rect x="3711" y="1515" width="359" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 3711 1529.06 L 4070 1529.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="3885" y="1526.5">ConnectServerDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3717.5" y="1545.56">+ ConnectServerDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3717.5" y="1561.56">+ ~ConnectServerDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3717.5" y="1577.56">+ void createConnectServerDatagram(uint64_t userId, int port)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="3717.5" y="1593.56">+ void extractConnectServerDatagram(uint64_t &amp;userId, int port)</text></g><rect x="4133" y="1513.5" width="293" height="88.35" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 4133 1527.5 L 4426 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="4274" y="1525">CreateLobbyDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4139.5" y="1544">+ CreateLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4139.5" y="1560">+ ~CreateLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4139.5" y="1576">+ void createCreateLobbyDatagram(uint64_t userId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4139.5" y="1592">+ void extractCreateLobbyDatagram(uint64_t &amp;userId)</text></g><rect x="4489.26" y="1513.5" width="374" height="88.36" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 4489.26 1527.5 L 4863.26 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="4670.76" y="1525">DeletePlayerDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4495.76" y="1544">+ DeletePlayerDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4495.76" y="1560">+ ~DeletePlayerDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4495.76" y="1576">+ void createDeletePlayerDatagram(const std::string &amp;playerName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4495.76" y="1592">+ void extractDeletePlayerDatagram(std::string &amp;playerName)</text></g><rect x="4917.35" y="1516.5" width="348" height="88.36" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 4917.35 1530.63 L 5265.35 1530.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="5085.85" y="1528">EndGameDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4923.85" y="1547.13">+ EndGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4923.85" y="1563.13">+ ~EndGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4923.85" y="1579.13">+ void createEndGameDatagram(const EndGameInfos &amp;infos)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4923.85" y="1595.12">+ void extractEndGameDatagram(EndGameInfos &amp;infos)</text></g><rect x="5321" y="1515.5" width="317" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 5321 1529.53 L 5638 1529.53" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="5474" y="1527">EnemyDeathDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5327.5" y="1546.03">+ EnemyDeathDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5327.5" y="1562.03">+ ~EnemyDeathDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5327.5" y="1578.03">+ void createEnemyDeathDatagram(uint64_t enemyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5327.5" y="1594.03">+ void extractEnemyDeathDatagram(uint64_t &amp;enemyId)</text></g><rect x="5697" y="1513.5" width="307" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 5697 1527.5 L 6004 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="5845" y="1525">FetchLobbiesDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5703.5" y="1544">+ FetchLobbiesDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5703.5" y="1560">+ ~FetchLobbiesDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5703.5" y="1576">+ void createFetchLobbiesDatagram(uint64_t userId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5703.5" y="1592">+ void extractFetchLobbiesDatagram(uint64_t &amp;userId)</text></g><rect x="6064" y="1511" width="608" height="88" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6064 1525 L 6672 1525" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6362.5" y="1522.5">InputDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6070.5" y="1541.5">+ InputDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6070.5" y="1557.5">+ ~InputDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6070.5" y="1573.5">+ void createInputDatagram(uint64_t userId, uint64_t lobbyId, RtypeGameKeys key, RtypeKeyState state)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6070.5" y="1589.5">+ void extractInputDatagram(uint64_t &amp;userId, uint64_t &amp;lobbyId, RtypeGameKeys &amp;key, RtypeKeyState &amp;state</text></g><rect x="6725" y="1511.5" width="400" height="88" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6725 1525.63 L 7125 1525.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6919.5" y="1523">LeaveGameDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6731.5" y="1542.13">+ LeaveGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6731.5" y="1558.13">+ ~LeaveGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6731.5" y="1574.13">+ void createLeaveGameDatagram(uint64_t userId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6731.5" y="1590.12">+ void extractLeaveGameDatagram(uint64_t &amp;userId, uint64_t &amp;lobbyId)</text></g><rect x="7176" y="1511.5" width="401" height="88" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 7176 1525.63 L 7577 1525.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="7371" y="1523">LeaveLobbyDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7182.5" y="1542.13">+ LeaveLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7182.5" y="1558.13">+ ~LeaveLobbyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7182.5" y="1574.13">+ void createLeaveLobbyDatagram(uint64_t userId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7182.5" y="1590.12">+ void extractLeaveLobbyDatagram(uint64_t &amp;userId, uint64_t &amp;lobbyId)</text></g><rect x="7628.59" y="1513.5" width="308" height="88.36" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 7628.59 1527.5 L 7936.59 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="7777.09" y="1525">LobbyInfosDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7635.09" y="1544">+ LobbyInfosDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7635.09" y="1560">+ ~LobbyInfosDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7635.09" y="1576">+ void createLobbyInfosDatagram(const Lobby &amp;lobby)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7635.09" y="1592">+ void extractLobbyInfosDatagram(Lobby &amp;lobby)</text></g><rect x="7992" y="1511.5" width="301" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 7992 1525.63 L 8293 1525.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="8137" y="1523">PlayerDeathDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7998.5" y="1542.13">+ PlayerDeathDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7998.5" y="1558.13">+ ~PlayerDeathDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7998.5" y="1574.13">+ void createPlayerDeathDatagram(uint64_t userId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7998.5" y="1590.12">+ void extractPlayerDeathDatagram(uint64_t &amp;userId)</text></g><rect x="8347" y="1513.5" width="437" height="88" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 8347 1527.5 L 8784 1527.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="8560" y="1525">RequestStartGameDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8353.5" y="1544">+ RequestStartGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8353.5" y="1560">+ ~RequestStartGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8353.5" y="1576">+ void createRequestStartGameDatagram(uint64_t userId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8353.5" y="1592">+ void extractRequestStartGameDatagram(uint64_t &amp;userId, uint64_t &amp;lobbyId)</text></g><rect x="8843.62" y="1512.5" width="643" height="88.37" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 8843.62 1526.56 L 9486.62 1526.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="9159.62" y="1524">SpawnEnemyDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8850.12" y="1543.06">+ SpawnEnemyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8850.12" y="1559.06">+ ~SpawnEnemyDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8850.12" y="1575.06">+ void createSpawnEnemyDatagram(uint64_t enemyId, const std::pair&lt;float, float&gt; &amp;position, const std::string &amp;name)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8850.12" y="1591.06">+ void extractSpawnEnemyDatagram(uint64_t &amp;enemyId, std::pair&lt;float, float&gt; &amp;position, std::string &amp;name)</text></g><rect x="9540.5" y="1511.62" width="603" height="88.37" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 9540.5 1525.63 L 10143.5 1525.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="9836.5" y="1523.12">StartGameDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="9547" y="1542.13">+ StartGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="9547" y="1558.13">+ ~StartGameDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="9547" y="1574.13">+ void createStartGameDatagram(uint32_t nbComponents, const std::vector&lt;ComponentInfos&gt; &amp;components)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="9547" y="1590.12">+ void extractStartGameDatagram(uint32_t &amp;nbComponents, std::vector&lt;ComponentInfos&gt; &amp;components)</text></g><rect x="10206" y="1511.5" width="454" height="91" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 10206 1525.63 L 10660 1525.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="10427.5" y="1523">TriggerBonusDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10212.5" y="1542.13">+ TriggerBonusDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10212.5" y="1558.13">+ ~TriggerBonusDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10212.5" y="1574.13">+ void createTriggerBonusDatagram(uint64_t userId, RtypeBonusTypes bonus)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10212.5" y="1590.12">+ void extractTriggerBonusDatagram(uint64_t &amp;userId, RtypeBonusTypes &amp;bonus)</text></g><rect x="10718.09" y="1511" width="646" height="88.36" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 10718.09 1525 L 11364.09 1525" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="11035.59" y="1522.5">UpdateComponentsDatagram</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10724.59" y="1541.5">+ UpdateComponentsDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10724.59" y="1557.5">+ ~UpdateComponentsDatagram() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10724.59" y="1573.5">+ void createUpdateComponentsDatagram(uint32_t nbComponents, const std::vector&lt;ComponentInfos&gt; &amp;component)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10724.59" y="1589.5">+ void extractUpdateComponentsDatagram(uint32_t &amp;nbComponents, std::vector&lt;ComponentInfos&gt; &amp;component)</text></g><rect x="6476.83" y="1019.43" width="103" height="57.46" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6476.83 1033.44 L 6579.83 1033.44" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6522.83" y="1030.93">HostInfos</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6483.33" y="1047.94">+ std::string host</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6483.33" y="1063.94">+ int port</text></g><rect x="7354.5" y="1015.43" width="228" height="359" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 7354.5 1043.44 L 7582.5 1043.44" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="7463" y="1026.93">&lt;&lt;enumeration&gt;&gt;</text><text x="7463" y="1040.93">RtypeOpCode</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1057.94">RtypeOpCodeNone</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1073.94">RtypeOpCodeBinary = 100</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1089.94">RtypeOpCodeConnectServer = 120</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1105.94">RtypeOpCodeLobbyInfos = 210</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1121.94">RtypeOpCodeAvailableLobbies = 211</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1137.94">RtypeOpCodeCreateLobby = 220</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1153.94">RtypeOpCodeFetchLobbies = 221</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1169.94">RtypeOpCodeConnectLobby = 222</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1185.94">RtypeOpCodeLeaveLobby = 223</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1201.94">RtypeOpCodeStartGame = 310</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1217.94">RtypeOpCodePlayerDeath = 311</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1233.94">RtypeOpCodeTriggerBonus = 312</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1249.94">RtypeOpCodeSpawnEnemy = 313</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1265.94">RtypeOpCodeEnemyDeath = 314</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1281.94">RtypeOpCodeEndGame = 315</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1297.94">RtypeOpCodeDeletePlayer = 316</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1313.94">RtypeOpCodeInput = 320</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1329.94">RtypeOpCodeRequestStartGame = 321</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1345.94">RtypeOpCodeLeaveGame = 322</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7361" y="1361.94">RtypeOpCodeUpdateComponents = 410</text></g><path d="M 6930 1294 L 6930 1298.5 Q 6930 1303 6925 1303 L 6922.5 1303 Q 6920 1303 6920 1313 L 6920 1333" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1282 L 6936 1294 L 6924 1294 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6920 1417.5 L 6920 1453 Q 6920 1463 6925 1463 L 6927.5 1463 Q 6930 1463 6930 1473 L 6930 1513" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6920 1405.5 L 6926 1417.5 L 6914 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 7370 1463 Q 7380 1463 7380 1473 L 7380 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 7770 1463 Q 7780 1463 7780 1473 L 7780 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 8130 1463 Q 8140 1463 8140 1473 L 8140 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 8560 1463 Q 8570 1463 8570 1473 L 8570 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 9160 1463 Q 9170 1463 9170 1473 L 9170 1512.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 9830 1463 Q 9840 1463 9840 1473 L 9840 1511.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 10420 1463 Q 10430 1463 10430 1473 L 10430 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 11030 1463 Q 11040 1463 11040 1473 L 11040 1511" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 6380 1463 Q 6370 1463 6370 1473 L 6370 1511" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5860 1463 Q 5850 1463 5850 1473 L 5850 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5490 1463 Q 5480 1463 5480 1473 L 5480 1515.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5100 1463 Q 5090 1463 5090 1473 L 5090 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 4690 1463 Q 4680 1463 4680 1473 L 4680 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 4290 1463 Q 4280 1463 4280 1473 L 4280 1513" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3900 1463 Q 3890 1463 3890 1473 L 3890 1515" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3460 1463 Q 3450 1463 3450 1473 L 3450 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3010 1463 Q 3000 1463 3000 1473 L 3000 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 2520 1463 Q 2510 1463 2510 1473 L 2510 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6736.29 1153 L 6670 1153 Q 6660 1153 6660 1143 L 6660 1063 Q 6660 1053 6650 1053 L 6580 1053" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6749.29 1153 L 6742.79 1159.5 L 6736.29 1153 L 6742.79 1146.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7034.17 1363 L 7180 1363 Q 7190 1363 7190 1353 L 7190 1203 Q 7190 1193 7200 1193 L 7352.26 1193" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7341.38 1199 L 7353.38 1193 L 7341.38 1187" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="6359" y="346" width="287" height="130" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6359 374.06 L 6646 374.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6497" y="357.5">&lt;&lt;Interface&gt;&gt;</text><text x="6497" y="371.5">INetworkManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6365.5" y="390.56">+ virtual ~INetworkManager() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6365.5" y="406.56">+ virtual void start(int port) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6365.5" y="422.56">+ virtual void stop() = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6365.5" y="438.56">+ virtual void send(const Datagram &amp;datagram) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6365.5" y="454.56">+ virtual Datagram receive() = 0</text></g><rect x="7159.5" y="343.5" width="287" height="134.87" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 7159.5 371.56 L 7446.5 371.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="7297.5" y="355">&lt;&lt;Interface&gt;&gt;</text><text x="7297.5" y="369">IUdpSocket</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="388.06">+ virtual ~IUdpSocket() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="404.06">+ virtual void bind(int port) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="420.06">+ virtual void unbind() = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="436.06">+ virtual void send(const Datagram &amp;datagram) = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="452.06">+ virtual int getPort() const = 0</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="7166" y="468.06">+ virtual std::string getAddress() const = 0</text></g><rect x="6324.5" y="569" width="356" height="216.87" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6324.5 583.13 L 6680.5 583.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6324.5 668.13 L 6680.5 668.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="6497" y="580.5">NetworkManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="679.63">+ NetworkManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="695.63">+ ~NetworkManager() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="711.63">+ void start(int port) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="727.62">+ void stop() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="743.63">+ void send(const Datagram &amp;datagram) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="759.63">+ Datagram receive() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="775.63">- static void networkingThreadFunc(NetworkManager *manager)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="597.62">- bool _isStarted</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="613.63">- boost::asio::io_context _ioContext</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="629.63">- boost::asio::io_context::work *_worker</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="645.63">- std::thread _networkThread</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6331" y="661.63">- UdpSocket _socket</text></g><rect x="6760.5" y="570" width="1085" height="264.87" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 6760.5 584.06 L 7845.5 584.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6760.5 637.06 L 7845.5 637.06" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="7297.5" y="581.5">UdpSocket</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="648.56">+ UdpSocket(boost::asio::io_context &amp;context)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="664.56">+ ~UdpSocket() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="680.56">+ void bind(int port) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="696.56">+ void unbind() override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="712.56">+ void send(const Datagram &amp;datagram) override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="728.56">+ int getPort() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="744.56">+ std::string getAddress() const override</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="760.56">+ Datagram receive()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="776.56">+ bool isQueueEmpty()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="792.56">- void sendErrorHandler(const std::shared_ptr&lt;Datagram&gt; &amp;message, const std::error_code &amp;errorCode, std::size_t size)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="808.56">- void prepareReceiving()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="824.56">- void receiveCallback(const std::shared_ptr&lt;std::array&lt;char, size_t&gt;&gt; &amp;readingPoint, const std::shared_ptr&lt;boost::asio::ip::udp::endpoint&gt; &amp;endpoint, const std::error_code &amp;errorCode, std::size_t size)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="598.56">- boost::asio::ip::udp::socket _socket</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="614.56">- boost::asio::io_context &amp;_context</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="6767" y="630.56">- ThreadSafeQueue&lt;Datagram&gt; _queueDatagram</text></g><rect x="5628" y="372.5" width="571" height="476" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 5628 386.56 L 6199 386.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5628 503.56 L 6199 503.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="5908" y="384">RtypeServer</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="515.06">+ RtypeServer()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="531.06">+ ~RtypeServer() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="547.06">+ void run(int port)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="563.06">+ void stop()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="579.06">+ void setTimeVal(const unsigned int &amp;newTimeVal)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="595.06">+ unsigned int getTimeVal() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="611.06">- void receive()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="627.06">- void handleConnection()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="643.06">- void handleDisconnection()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="659.06">- void sendFirstDatagramInQueue()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="675.06">- void handleConnectServer(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="691.06">- void handleCreateLobby(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="707.06">- void handleFetchLobbies(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="723.06">- void handleInput(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="739.06">- void handleCodeBinary(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="755.06">- void handleRequestStartGame(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="771.06">- void handleConnectLobby(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="787.06">- void handleLeaveLobby(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="803.06">- void handleLeaveGame(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="819.06">- void sendError(const HostInfos &amp;hostInfos, const std::string &amp;error) const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="835.06">- static void SignalHandler(int signal)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="401.06">- std::unique_ptr&lt;INetworkManager&gt; _networkManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="417.06">- bool _isStarted</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="433.06">- unsigned int _timeVal</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="449.06">- GameManager &amp;_manager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="465.06">- std::map&lt;uint64_t, HostInfos&gt; _clientHosts</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="481.06">- static bool caughtSigInt = false</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5634.5" y="497.06">- static const std::map&lt;RtypeDatagram::RtypeOpCode, void(*)(RtypeDatagram &amp;)&gt; _opCodeHandleMap</text></g><rect x="8404" y="498" width="1174" height="406" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 8404 512.03 L 9578 512.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8404 613.03 L 9578 613.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="8985.5" y="509.5">GameManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="624.53">+ ~GameManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="640.53">+ uint64_t createLobby(uint64_t playerId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="656.53">+ void joinLobby(uint64_t playerId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="672.53">+ std::vector&lt;Lobby&gt; getAvailableLobbies() const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="688.53">+ void leaveLobby(uint64_t playerId, uint64_t lobbyId)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="704.53">+ Lobby getLobby(uint64_t lobbyId) const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="720.53">+ uint64_t getLobbyId(uint64_t playerId) const</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="736.53">+ void handleStartGame(uint64_t lobbyId, const std::map&lt;uint64_t, HostInfos&gt; &amp;listInfos=</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="752.53">+ GameManager (const GameManager &amp;) = delete</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="768.53">+ GameManager &amp;operator=(const GameManager &amp;) = delete</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="784.53">+ bool hasPendingDatagram()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="800.53">+ Datagram getFirstElementInQueue()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="816.53">+ void popFirstElementInQueue()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="832.53">+ void pushDatagramByLobby(uint64_t lobbyId, RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="848.53">+ static GameManager &amp;getGameManagerInstance()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="864.53">- GameManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="880.53">- static void runGame(const Lobby &amp;gameLobby, ThreadSafeQueue&lt;Datagram&gt; &amp;datagramQueueOut, std::map&lt;uint64_t, ThreadafeQueue&lt;RtypeDatagram&gt;&gt; &amp;queueIn, const std::map&lt;uint64_t, HostInfos&gt; &amp;listInfos)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="526.53">- std::vector&lt;std::pair&lt;uint64_t, uint64_t&gt;&gt; _playerLobby</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="542.53">- std::mutex _mutex</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="558.53">- std::vector&lt;std::thread&gt; _workers</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="574.53">- std::map&lt;uint64_t, Lobby&gt; _lobbies</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="590.53">- ThreadSafeQueue&lt;Datagram&gt; _datagramQueueOut</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8410.5" y="606.53">- std::map&lt;uint64_t, ThreadSafeQueue&lt;RtypeDatagram&gt;&gt; _queueIn</text></g><rect x="8765" y="962.5" width="1077" height="394" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 8765 976.56 L 9842 976.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8765 1141.56 L 9842 1141.56" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="9298" y="974">Game</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1153.06">+ Game(const Lobby &amp;lobby, ThreadSafeQueue&lt;Datagram&gt; &amp;datagramQueueOut, std::map&lt;uint64_t, ThreadSafeQueue&lt;RtypeDatagram&gt;&gt; &amp;queueIn, const std::map&lt;uint64_t, HostInfos&gt; &amp;listInfos)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1169.06">+ ~Game()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1185.06">+ void run()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1201.06">+ ecs::managers::SystemManager &amp;getSystemManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1217.06">+ ecs::managers::Entity &amp;getEntityManager()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1233.06">- void handleInputByClient(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1249.06">- void handleLeaveGame(RtypeDatagram &amp;data)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1265.06">- void manageReceivedDatagram()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1281.06">- void initPlayer()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1297.06">- void startGame()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1313.06">- void handleShoot(const std::string &amp;entityPlayerName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1329.06">- void sendUpdateShoot()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1345.06">- void sendDeletePlayer(const std::string &amp;playerName)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="991.06">- ecs::managers::SystemManager _systemManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1007.06">- ecs::managers::EntityManager _entityManager</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1023.06">- bool _start</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1039.06">- Lobby _lobby</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1055.06">- ThreadSafeQueue&lt;Datagram&gt; &amp;_datagramQueueOut</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1071.06">- std::map&lt;uint64_t, ThreadSafeQueue&lt;RtypeDatagram&gt;&gt; &amp;_queueIn</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1087.06">- std::map&lt;uint64_t, HostInfos&gt; _listInfos</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1103.06">- int _windowWidth</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1119.06">- int _windowHeight</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8771.5" y="1135.06">- static const std::map&lt;RtypeDatagram::RtypeOpCode, void (*)(RtypeDatagram &amp;)&gt; _opCodeHandleMap</text></g><path d="M 6500 489.12 L 6500 513 Q 6500 523 6500 533 L 6500 569" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6500 477.12 L 6506 489.12 L 6494 489.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7303 491.49 L 7303 570" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7303 479.49 L 7309 491.49 L 7297 491.49 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6646 413 L 6710 413 Q 6720 413 6720 423 L 6720 903 Q 6720 913 6730 913 L 6910 913 Q 6920 913 6920 923 L 6920 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 1002.31 L 6920 1014.31 L 6926 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6500 783 L 6500 903 Q 6500 913 6510 913 L 6920 913 Q 6930 913 6930 923 L 6930 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6924 1002.31 L 6930 1014.31 L 6936 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7159.5 413 L 6730 413 Q 6720 413 6720 423 L 6720 903 Q 6720 913 6730 913 L 6910 913 Q 6920 913 6920 923 L 6920 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 999.88 L 6920 1011.88 L 6926 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7300 834.87 L 7300 913 Q 7300 923 7290 923 L 6930 923 Q 6920 923 6920 933 L 6920 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 999.88 L 6920 1011.88 L 6926 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="8048" y="608" width="204" height="188" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 8048 622.03 L 8252 622.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8048 675.03 L 8252 675.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="8144.5" y="619.5">ThreadSafeQueue&lt;T&gt;</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="686.53">+ ThreadSafeQueue()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="702.53">+ ~ThreadSafeQueue() = default</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="718.53">+ const T &amp;front()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="734.53">+ void pop()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="750.53">+ void push_back(const T &amp;toPush)</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="766.53">+ int size()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="782.53">+ bool isEmpty()</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="636.53">- std::deque&lt;T&gt; _queue</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="652.53">- std::condition_variable _condition</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="8054.5" y="668.53">- std::mutex _mutex</text></g><path d="M 7863.71 703 L 8050 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7850.71 703 L 7857.21 696.5 L 7863.71 703 L 7857.21 709.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6213.71 613 L 6270 613 Q 6280 613 6280 603 L 6280 423 Q 6280 413 6290 413 L 6360 413" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6200.71 613 L 6207.21 606.5 L 6213.71 613 L 6207.21 619.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 853 L 5910 1053 Q 5910 1063 5920 1063 L 6477.76 1063" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6466.88 1069 L 6478.88 1063 L 6466.88 1057" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 848.5 L 5910 963 Q 5910 973 5920 973 L 7460 973 Q 7470 973 7470 983 L 7470 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7464 999.88 L 7470 1011.88 L 7476 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 848.5 L 5910 1373 Q 5910 1383 5920 1383 L 6817.76 1383" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6806.88 1389 L 6818.88 1383 L 6806.88 1377" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8386.29 703 L 8340 703 Q 8330 703 8320 703 L 8252 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8399.29 703 L 8392.79 709.5 L 8386.29 703 L 8392.79 696.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8404 773 L 8340 773 Q 8330 773 8330 783 L 8330 913 Q 8330 923 8320 923 L 6930 923 Q 6920 923 6920 933 L 6920 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 1002.31 L 6920 1014.31 L 6926 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8700 903 L 8700 1423 Q 8700 1433 8690 1433 L 6990 1433 Q 6980 1433 6980 1423 L 6980 1405.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6986 1416.12 L 6980 1404.12 L 6974 1416.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8700 903 L 8700 923 Q 8700 933 8690 933 L 6540 933 Q 6530 933 6530 943 L 6530 1020.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6524 1009.88 L 6530 1021.88 L 6536 1009.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8756.29 1163 L 8160 1163 Q 8150 1163 8150 1153 L 8150 796" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8769.29 1163 L 8762.79 1169.5 L 8756.29 1163 L 8762.79 1156.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8770 1063 L 7680 1063 Q 7670 1063 7670 1053 L 7670 963 Q 7670 953 7660 953 L 6560 953 Q 6550 953 6550 963 L 6550 1020.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6544 1009.88 L 6550 1021.88 L 6556 1009.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8770 1263 L 8710 1263 Q 8700 1263 8700 1273 L 8700 1423 Q 8700 1433 8690 1433 L 6990 1433 Q 6980 1433 6980 1423 L 6980 1405.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6986 1416.12 L 6980 1404.12 L 6974 1416.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="4433.5" y="1748.5" width="112" height="58" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 4433.5 1762.5 L 4545.5 1762.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="4484" y="1760">Lobby</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4440" y="1777">+ uint64_t id</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4440" y="1793">+ Player player [4]</text></g><path d="M 4419.79 1783 L 4409.9 1783 Q 4400 1783 4390 1783 L 4360 1783" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 4432.79 1783 L 4426.29 1789.5 L 4419.79 1783 L 4426.29 1776.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7780 1601.86 L 7780 1703 Q 7780 1713 7770 1713 L 4500 1713 Q 4490 1713 4490 1723 L 4490 1746.26" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 4484 1735.38 L 4490 1747.38 L 4496 1735.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><rect x="5030" y="1748.43" width="123" height="43" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 5030 1762.5 L 5153 1762.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="5086" y="1759.93">EndGameInfos</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="5036.5" y="1777">+ unsigned int score</text></g><rect x="4260" y="1748" width="102" height="60" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 4260 1762.03 L 4362 1762.03" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="4305.5" y="1759.5">Player</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4266.5" y="1776.53">+ uint64_t id</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="4266.5" y="1792.53">+ char name[10]</text></g><rect x="10949.17" y="1748.93" width="184" height="103" fill="#7acff5" stroke="#000000" pointer-events="none"/><path d="M 10949.17 1762.97 L 11133.17 1762.97" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="11035.67" y="1760.43">ComponentInfo</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10955.67" y="1777.47">+ char entityName [20]</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10955.67" y="1793.47">+ std::pair&lt;float, float&gt; position</text></g><g fill="#000000" font-family="Helvetica" font-size="12px"><text x="10955.67" y="1809.47">+ std::pair&lt;float, float&gt; velocity</text></g><path d="M 11040 1599.36 L 11040 1663 Q 11040 1673 11040 1683 L 11040 1746.69" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 11034 1735.81 L 11040 1747.81 L 11046 1735.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2510 1601.86 L 2510 1703 Q 2510 1713 2520 1713 L 4480 1713 Q 4490 1713 4490 1723 L 4490 1746.26" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 4484 1735.38 L 4490 1747.38 L 4496 1735.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5090 1604.86 L 5090 1663 Q 5090 1673 5090 1683 L 5090 1750.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 5084 1739.88 L 5090 1751.88 L 5096 1739.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840 1599.99 L 9840 1703 Q 9840 1713 9850 1713 L 11030 1713 Q 11040 1713 11040 1723 L 11040 1746.69" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 11034 1735.81 L 11040 1747.81 L 11046 1735.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9593.71 703 L 9680 703 Q 9690 703 9700 703 L 11400 703 Q 11410 703 11410 713 L 11410 1913 Q 11410 1923 11400 1923 L 4500 1923 Q 4490 1923 4490 1913 L 4490 1803" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9580.71 703 L 9587.21 696.5 L 9593.71 703 L 9587.21 709.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1163 L 11530 1163 Q 11540 1163 11540 1173 L 11540 1873 Q 11540 1883 11530 1883 L 4530 1883 Q 4520 1883 4520 1873 L 4520 1803" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1163 L 9847.21 1156.5 L 9853.71 1163 L 9847.21 1169.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1063 L 9920 1063 Q 9930 1063 9930 1053 L 9930 23 Q 9930 13 9920 13 L 720 13 Q 710 13 710 23 L 710 1163.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1063 L 9847.21 1056.5 L 9853.71 1063 L 9847.21 1069.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1063 L 9920 1063 Q 9930 1063 9930 1053 L 9930 23 Q 9930 13 9920 13 L 720 13 Q 710 13 710 23 L 710 983 Q 710 993 700 993 L 508 993" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1063 L 9847.21 1056.5 L 9853.71 1063 L 9847.21 1069.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 200 466.12 L 200 474.56 Q 200 483 200 493 L 200 513" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 200 454.12 L 206 466.12 L 194 466.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 353.71 603 L 410 603 Q 420 603 420 593 L 420 453" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 340.71 603 L 347.21 596.5 L 353.71 603 L 347.21 609.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1270 572.12 L 1270 593 Q 1270 603 1270 613 L 1270 647" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1270 560.12 L 1276 572.12 L 1264 572.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1870 394.12 L 1870 398.56 Q 1870 403 1870 409.5 L 1870 416" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1870 382.12 L 1876 394.12 L 1864 394.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 847.79 L 280 773 Q 280 763 270 763 L 210 763 Q 200 763 200 753 L 200 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 280 860.79 L 273.5 854.29 L 280 847.79 L 286.5 854.29 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1870 522 L 1870 573 Q 1870 583 1860 583 L 1520 583 Q 1510 583 1500 583 L 1330 583 Q 1320 583 1320 573 L 1320 561.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1326 572.12 L 1320 560.12 L 1314 572.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 807.71 1273 L 1260 1273 Q 1270 1273 1270 1263 L 1270 983" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 794.71 1273 L 801.21 1266.5 L 807.71 1273 L 801.21 1279.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1603.71 813 L 1660 813 Q 1670 813 1670 803 L 1670 353 Q 1670 343 1680 343 L 1750 343" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590.71 813 L 1597.21 806.5 L 1603.71 813 L 1597.21 819.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1294 L 6930 1298.5 Q 6930 1303 6925 1303 L 6922.5 1303 Q 6920 1303 6920 1313 L 6920 1333" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1282 L 6936 1294 L 6924 1294 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6920 1417.5 L 6920 1453 Q 6920 1463 6925 1463 L 6927.5 1463 Q 6930 1463 6930 1473 L 6930 1513" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6920 1405.5 L 6926 1417.5 L 6914 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 7370 1463 Q 7380 1463 7380 1473 L 7380 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 7770 1463 Q 7780 1463 7780 1473 L 7780 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 8130 1463 Q 8140 1463 8140 1473 L 8140 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 8560 1463 Q 8570 1463 8570 1473 L 8570 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 9160 1463 Q 9170 1463 9170 1473 L 9170 1512.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 9830 1463 Q 9840 1463 9840 1473 L 9840 1511.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 10420 1463 Q 10430 1463 10430 1473 L 10430 1511.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6940 1463 L 11030 1463 Q 11040 1463 11040 1473 L 11040 1511" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 6380 1463 Q 6370 1463 6370 1473 L 6370 1511" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5860 1463 Q 5850 1463 5850 1473 L 5850 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5490 1463 Q 5480 1463 5480 1473 L 5480 1515.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 5100 1463 Q 5090 1463 5090 1473 L 5090 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 4690 1463 Q 4680 1463 4680 1473 L 4680 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 4290 1463 Q 4280 1463 4280 1473 L 4280 1513" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3900 1463 Q 3890 1463 3890 1473 L 3890 1515" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3460 1463 Q 3450 1463 3450 1473 L 3450 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 3010 1463 Q 3000 1463 3000 1473 L 3000 1516.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1417.5 L 6930 1453 Q 6930 1463 6920 1463 L 2520 1463 Q 2510 1463 2510 1473 L 2510 1513.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6930 1405.5 L 6936 1417.5 L 6924 1417.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6736.29 1153 L 6670 1153 Q 6660 1153 6660 1143 L 6660 1063 Q 6660 1053 6650 1053 L 6580 1053" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6749.29 1153 L 6742.79 1159.5 L 6736.29 1153 L 6742.79 1146.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7034.17 1363 L 7180 1363 Q 7190 1363 7190 1353 L 7190 1203 Q 7190 1193 7200 1193 L 7352.26 1193" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7341.38 1199 L 7353.38 1193 L 7341.38 1187" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6500 489.12 L 6500 513 Q 6500 523 6500 533 L 6500 569" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6500 477.12 L 6506 489.12 L 6494 489.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7303 491.49 L 7303 570" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7303 479.49 L 7309 491.49 L 7297 491.49 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6646 413 L 6710 413 Q 6720 413 6720 423 L 6720 903 Q 6720 913 6730 913 L 6910 913 Q 6920 913 6920 923 L 6920 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 1002.31 L 6920 1014.31 L 6926 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6500 783 L 6500 903 Q 6500 913 6510 913 L 6920 913 Q 6930 913 6930 923 L 6930 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6924 1002.31 L 6930 1014.31 L 6936 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7159.5 413 L 6730 413 Q 6720 413 6720 423 L 6720 903 Q 6720 913 6730 913 L 6910 913 Q 6920 913 6920 923 L 6920 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 999.88 L 6920 1011.88 L 6926 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7300 834.87 L 7300 913 Q 7300 923 7290 923 L 6930 923 Q 6920 923 6920 933 L 6920 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 999.88 L 6920 1011.88 L 6926 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7863.71 703 L 8050 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7850.71 703 L 7857.21 696.5 L 7863.71 703 L 7857.21 709.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6213.71 613 L 6270 613 Q 6280 613 6280 603 L 6280 423 Q 6280 413 6290 413 L 6360 413" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 6200.71 613 L 6207.21 606.5 L 6213.71 613 L 6207.21 619.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 853 L 5910 1053 Q 5910 1063 5920 1063 L 6477.76 1063" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6466.88 1069 L 6478.88 1063 L 6466.88 1057" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 848.5 L 5910 963 Q 5910 973 5920 973 L 7460 973 Q 7470 973 7470 983 L 7470 1010.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 7464 999.88 L 7470 1011.88 L 7476 999.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5910 848.5 L 5910 1373 Q 5910 1383 5920 1383 L 6817.76 1383" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6806.88 1389 L 6818.88 1383 L 6806.88 1377" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8386.29 703 L 8340 703 Q 8330 703 8320 703 L 8252 703" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8399.29 703 L 8392.79 709.5 L 8386.29 703 L 8392.79 696.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8404 773 L 8340 773 Q 8330 773 8330 783 L 8330 913 Q 8330 923 8320 923 L 6930 923 Q 6920 923 6920 933 L 6920 1013.19" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6914 1002.31 L 6920 1014.31 L 6926 1002.31" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8700 903 L 8700 1423 Q 8700 1433 8690 1433 L 6990 1433 Q 6980 1433 6980 1423 L 6980 1405.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6986 1416.12 L 6980 1404.12 L 6974 1416.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8700 903 L 8700 923 Q 8700 933 8690 933 L 6540 933 Q 6530 933 6530 943 L 6530 1020.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6524 1009.88 L 6530 1021.88 L 6536 1009.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8756.29 1163 L 8160 1163 Q 8150 1163 8150 1153 L 8150 796" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8769.29 1163 L 8762.79 1169.5 L 8756.29 1163 L 8762.79 1156.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8770 1063 L 7680 1063 Q 7670 1063 7670 1053 L 7670 963 Q 7670 953 7660 953 L 6560 953 Q 6550 953 6550 963 L 6550 1020.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6544 1009.88 L 6550 1021.88 L 6556 1009.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 8770 1263 L 8710 1263 Q 8700 1263 8700 1273 L 8700 1423 Q 8700 1433 8690 1433 L 6990 1433 Q 6980 1433 6980 1423 L 6980 1405.24" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 6986 1416.12 L 6980 1404.12 L 6974 1416.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 4419.79 1783 L 4409.9 1783 Q 4400 1783 4390 1783 L 4360 1783" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 4432.79 1783 L 4426.29 1789.5 L 4419.79 1783 L 4426.29 1776.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 7780 1601.86 L 7780 1703 Q 7780 1713 7770 1713 L 4500 1713 Q 4490 1713 4490 1723 L 4490 1746.26" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 4484 1735.38 L 4490 1747.38 L 4496 1735.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 11040 1599.36 L 11040 1663 Q 11040 1673 11040 1683 L 11040 1746.69" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 11034 1735.81 L 11040 1747.81 L 11046 1735.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2510 1601.86 L 2510 1703 Q 2510 1713 2520 1713 L 4480 1713 Q 4490 1713 4490 1723 L 4490 1746.26" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 4484 1735.38 L 4490 1747.38 L 4496 1735.38" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 5090 1604.86 L 5090 1663 Q 5090 1673 5090 1683 L 5090 1750.76" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 5084 1739.88 L 5090 1751.88 L 5096 1739.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840 1599.99 L 9840 1703 Q 9840 1713 9850 1713 L 11030 1713 Q 11040 1713 11040 1723 L 11040 1746.69" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 11034 1735.81 L 11040 1747.81 L 11046 1735.81" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9593.71 703 L 9680 703 Q 9690 703 9700 703 L 11400 703 Q 11410 703 11410 713 L 11410 1913 Q 11410 1923 11400 1923 L 4500 1923 Q 4490 1923 4490 1913 L 4490 1803" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9580.71 703 L 9587.21 696.5 L 9593.71 703 L 9587.21 709.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1163 L 11530 1163 Q 11540 1163 11540 1173 L 11540 1873 Q 11540 1883 11530 1883 L 4530 1883 Q 4520 1883 4520 1873 L 4520 1803" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1163 L 9847.21 1156.5 L 9853.71 1163 L 9847.21 1169.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1063 L 9920 1063 Q 9930 1063 9930 1053 L 9930 23 Q 9930 13 9920 13 L 720 13 Q 710 13 710 23 L 710 1163.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1063 L 9847.21 1056.5 L 9853.71 1063 L 9847.21 1069.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9853.71 1063 L 9920 1063 Q 9930 1063 9930 1053 L 9930 23 Q 9930 13 9920 13 L 720 13 Q 710 13 710 23 L 710 983 Q 710 993 700 993 L 508 993" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 9840.71 1063 L 9847.21 1056.5 L 9853.71 1063 L 9847.21 1069.5 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/></g><g fill="#787878" font-family="Arial,Helvetica" font-size="12px"><text x="6" y="15">Visual Paradigm Online Diagrams Express Edition</text></g><g fill="#787878" font-family="Arial,Helvetica" text-anchor="end" font-size="12px"><text x="11618" y="2288">Visual Paradigm Online Diagrams Express Edition</text></g></svg>